{
  "SaveName": "",
  "GameMode": "",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Date": "",
  "Table": "",
  "Sky": "",
  "Note": "",
  "Rules": "",
  "XmlUI": "",
  "LuaScript": "",
  "LuaScriptState": "",
  "ObjectStates": [
    {
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -22.5566254,
        "posY": 1.07,
        "posZ": -14.758194,
        "rotX": 2.72982265E-06,
        "rotY": 179.9993,
        "rotZ": -1.25349754E-06,
        "scaleX": 0.55000037,
        "scaleY": 0.55000037,
        "scaleZ": 0.55000037
      },
      "Nickname": "Turn-O-Matic     by: MrStump",
      "Description": "END TURN - Ends turn, passes to the next color on the list.\n\nBACK - Ends turn, passes to the previous color on the list.\n\nCOLOR NAME - Press a color name to pass turn to them.\n\nSET PLACE - Sets where the tool moves itself to. Position relative to the name on the table.\n\nSET COLOR - Press to change the colors in the list.\n",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://drive.google.com/uc?export=download&id=0B2Vde7gggGHpRGNJZnZkd2JIMjA",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 1,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "XmlUI": "",
      "LuaScript": "--Prevents anyone but that color, host or promoted players from using buttons\r\n--true is on, false is off\r\npreventOtherColor = false\r\n\r\n--Allows for colors to be put onto the list more than once\r\n--There is still a max limit of turns in the list, due to limited space.\r\n--true is on, false is off\r\nallowRepeatSelections = false\r\n\r\n--Limit on color selections that go into the list, do NOT INCREASE OVER 10.\r\n--If you do, it will look ugly and dumb. It will still work though.\r\nmaxColorsInList = 10\r\n\r\nfunction onSave()\r\n    local data_to_save = {cl=colorList, ci=currentIndex, dp=deltaPos}\r\n    saved_data = JSON.encode(data_to_save)\r\n    return saved_data\r\nend\r\n\r\nfunction onload(saved_data)\r\n    if saved_data ~= \"\" then\r\n        --Set up information off of loaded_data\r\n        local loaded_data = JSON.decode(saved_data)\r\n        colorList = loaded_data.cl\r\n        currentIndex = loaded_data.ci\r\n        deltaPos = loaded_data.dp\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        colorList = {\r\n            \"White\", \"Brown\", \"Red\", \"Orange\", \"Yellow\",\r\n            \"Green\", \"Teal\", \"Blue\", \"Purple\", \"Pink\"\r\n        }\r\n        currentIndex = 1\r\n        deltaPos = {0,1,4}\r\n    end\r\n\r\n    --Check to make sure that all colors in colorList exist on the table.\r\n    --If not, it resets the tool to its \"inactive\" state.\r\n    local wasListReset = false\r\n    for _, color in ipairs(colorList) do\r\n        if Player[color].getPlayerHand() == nil then\r\n            currentIndex = 0\r\n            colorList = {}\r\n            wasListReset = true\r\n            break\r\n        end\r\n    end\r\n    if wasListReset == false and #colorList > 0 then\r\n        moveToolToPlayer()\r\n    else\r\n        broadcastToAll(\"No colors selected. Tool Inactive. Use [ff6666]Set Color[-] to pick colors.\", {0.8,0.05,0.05})\r\n    end\r\n\r\n    createActiveModeButtons()\r\nend\r\n\r\n--[[            Active Buttons: End Turn, Back and Color Words            ]]\r\n\r\n--End turn button\r\nfunction clickEndTurn(_, clickerColor)\r\n    if isClickAllowed(clickerColor) == true then\r\n        if #colorList > 0 then\r\n            printMessageToAll(\"endTurn\", clickerColor)\r\n            --Set index of next color\r\n            if currentIndex == #colorList then currentIndex = 1\r\n            else currentIndex = currentIndex + 1 end\r\n            --Activate move\r\n            moveToolToPlayer()\r\n            moveColorIndicator(currentIndex)\n            Global.call('onPlayerEndTurn')\r\n        end\r\n    end\r\nend\r\n\r\n--Back turn button\r\nfunction clickBackTurn(_, clickerColor)\r\n    if isClickAllowed(clickerColor) == true then\r\n        if #colorList > 0 then\r\n            printMessageToAll(\"backTurn\", clickerColor)\r\n            --Set index of next color\r\n            if currentIndex == 1 then currentIndex = #colorList\r\n            else currentIndex = currentIndex - 1 end\r\n            --move tool move indicator\r\n            moveToolToPlayer()\r\n            moveColorIndicator(currentIndex)\r\n        end\r\n    end\r\nend\r\n\r\n--Color word click function\r\nfunction clickActiveColor(playerColor, clickerColor, i)\r\n    if isClickAllowed(clickerColor) == true then\r\n        printMessageToAll(\"activeColor\", clickerColor, playerColor)\r\n        currentIndex = i\r\n        moveToolToPlayer()\r\n        moveColorIndicator(currentIndex)\r\n    end\r\nend\r\n\r\n--[[            Active Buttons: Set Place and Set Color            ]]\r\n\r\n--Set Place click function\r\nfunction clickSetPlace(_, clickerColor)\r\n    if isClickAllowed(clickerColor) == true then\r\n        if #colorList > 0 then\r\n            local playerHand = Player[colorList[currentIndex]].getPlayerHand()\r\n            local toolPos = self.getPosition()\r\n            deltaPos = {\r\n                playerHand.trigger_right_x * (toolPos.x - playerHand.pos_x) - playerHand.trigger_forward_x * (toolPos.z - playerHand.pos_z) ,\r\n                toolPos.y - playerHand.pos_y,\r\n                playerHand.trigger_forward_z * (toolPos.z - playerHand.pos_z) - playerHand.trigger_right_z * (toolPos.x - playerHand.pos_x) ,\r\n            }\r\n            self.setLock(true)\r\n            broadcastToAll(\"Location for tool updated.\", {1,1,1})\r\n        end\r\n    end\r\nend\r\n\r\n--Set color click function\r\nfunction clickSetColor(_, clickerColor)\r\n    if isClickAllowed(clickerColor) == true then\r\n        colorList = {}\r\n        self.AssetBundle.playTriggerEffect(0)\r\n        self.clearButtons()\r\n        Timer.destroy(self.getGUID()..\"spawnButtons\")\r\n        Timer.create({\r\n            identifier=self.getGUID()..\"spawnButtons\", delay=0.5,\r\n            function_name=\"clickSetColorTimer\", function_owner=self\r\n        })\r\n    end\r\nend\r\n--Timer trigger from clickSetColor\r\nfunction clickSetColorTimer()\r\n    createEditModeButtons()\r\nend\r\n\r\n--[[            Edit Button Control            ]]\r\n\r\n--Color button click function\r\nfunction clickEditColor(playerColor, clickerColor)\r\n    if Player[playerColor].getPlayerHand() then\r\n        if allowRepeatSelections == true or getOffsetFromColorList(playerColor) == nil then\r\n            if #colorList <= maxColorsInList then\r\n                table.insert(colorList, playerColor)\r\n                addColorToColorList(playerColor)\r\n            else\r\n                broadcastToAll(maxColorsInList .. \" is the maximum number of entries you can have in the color list.\", {0.8,0.05,0.05})\r\n            end\r\n        else\r\n            broadcastToAll(playerColor..\" is already on the turn-order list.\", {0.8,0.05,0.05})\r\n        end\r\n    else\r\n        broadcastToAll(playerColor..\" is not a hand zone color available on this table.\", {0.8,0.05,0.05})\r\n    end\r\nend\r\n\r\n--Click function for undo\r\nfunction clickUndoColor()\r\n    if #colorList > 0 then\r\n        removeColorFromColorList()\r\n        table.remove(colorList, #colorList)\r\n    end\r\nend\r\n\r\n--Submit function to submit colors\r\nfunction clickSubmitColors()\r\n    self.AssetBundle.playTriggerEffect(1)\r\n    self.clearButtons()\r\n    if #colorList > 0 then\r\n        currentIndex = 1\r\n        moveToolToPlayer()\r\n    else\r\n        currentIndex = 0\r\n        self.setColorTint({0,0,0})\r\n        broadcastToAll(\"No colors selected. Tool Inactive. Use [ff6666]Set Color[-] to pick colors.\", {0.8,0.05,0.05})\r\n    end\r\n    createActiveModeButtons()\r\nend\r\n\r\n--[[            Utility functions            ]]\r\n\r\n--Finds what index number of colorList the current turn is\r\nfunction getOffsetFromColorList(c)\r\n    for i, color in ipairs(colorList) do\r\n        if color == c then\r\n            return i\r\n        end\r\n    end\r\n    return nil\r\nend\r\n\r\n--Moves the tool to whichever seat currentIndex of colorList is.\r\nfunction moveToolToPlayer()\r\n    self.setLock(true)\r\n    local playerHand = Player[colorList[currentIndex]].getPlayerHand()\r\n    if playerHand then\r\n        local rot = {0, playerHand.rot_y + 180, 0}\r\n        local pos = {\r\n            playerHand.pos_x + (playerHand.trigger_forward_x * deltaPos[3]) + (playerHand.trigger_right_x * deltaPos[1]),\r\n            playerHand.pos_y + deltaPos[2],\r\n            playerHand.pos_z + (playerHand.trigger_forward_z * deltaPos[3]) + (playerHand.trigger_right_z * deltaPos[1])\r\n        }\r\n        self.setPosition(pos)\r\n        self.setRotation(rot)\r\n        self.AssetBundle.playTriggerEffect(2)\r\n        self.setColorTint(stringColorToRGB(colorList[currentIndex]))\r\n        broadcastToAll(\"-\"..colorList[currentIndex]..\"'s Turn-\", stringColorToRGB(colorList[currentIndex]))\r\n    else\r\n        broadcastToAll(\"Cannot pass turn to \"..colorList[currentIndex]..\". It does not exist on this table.\", {0.8,0.05,0.05})\r\n    end\r\nend\r\n\r\n--Removes colors from colorList that do not exist on the actual table\r\nfunction removeInvalidColorsFromColorList()\r\n    for i, color in ipairs(colorList) do\r\n        local playerHand = Player[color].getPlayerHand()\r\n        if not playerHand then\r\n            table.remove(colorList, i)\r\n            removeInvalidColorsFromColorList()\r\n            break\r\n        end\r\n    end\r\nend\r\n\r\n--Creates the printToAll strings and prints them\r\nfunction printMessageToAll(type, clickerColor, playerColor)\r\n    local stringToPrint, key = \"\", type\r\n    if colorList[currentIndex] == clickerColor then key = key .. \"Match\"\r\n    else key = key .. \"Miss\" end\r\n    --This for loop is assembling an approprite string from a table of strings\r\n    --Certain strings are replaced by parameter data\r\n    for _, string in ipairs(printMessageStringGenerationData[key]) do\r\n        if string == \"CLICKC_NAME\" then\r\n            stringToPrint = stringToPrint..Player[clickerColor].steam_name\r\n        elseif string == \"CURRENTC\" then\r\n            stringToPrint = stringToPrint..colorList[currentIndex]\r\n        elseif string == \"PLAYERC\" then\r\n            stringToPrint = stringToPrint..playerColor\r\n        else\r\n            stringToPrint = stringToPrint..string\r\n        end\r\n    end\r\n    printToAll(stringToPrint, stringColorToRGB(colorList[currentIndex]))\r\nend\r\n\r\n--Used to determine if a player is allowed to click a given button\r\nfunction isClickAllowed(clickerColor)\r\n    if preventOtherColor == false then\r\n        return true\r\n    else\r\n        if Player[clickerColor].host==true then\r\n            return true\r\n        elseif Player[clickerColor].promoted==true then\r\n            return true\r\n        elseif clickerColor==colorList[currentIndex] then\r\n            return true\r\n        elseif clickerColor==\"\" then\r\n            return true\r\n        else\r\n            return false\r\n        end\r\n    end\r\nend\r\n\r\n--[[            Button Creation/Destruction/Editing            ]]\r\n\r\n--Spawns End/Back/Set buttons and color buttons (for the word list)\r\nfunction createActiveModeButtons()\r\n    --Marker next to name\r\n    local iOffset = currentIndex\r\n    if #colorList > 0 then\r\n        self.createButton({\r\n            label=string.char(8273)..\"               \"..string.char(8273),\r\n            click_function=\"none\", function_owner=self, height=0, width=0,\r\n            position={2.5,0.15,-2.54+0.57*(iOffset-1)}, font_size=240\r\n        })\r\n    end\r\n    --End/Back/Set buttons\r\n    for _, param in ipairs(activeModeButtonParams) do\r\n        self.createButton({\r\n            click_function=param.cf, function_owner=self,\r\n            position=param.p, height=param.h, width=param.w,\r\n        })\r\n    end\r\n    removeInvalidColorsFromColorList()\r\n    for i, color in ipairs(colorList) do\r\n        local funcName = \"clickActive\"..color\r\n        local func = function(o,c) clickActiveColor(color, c, i) end\r\n        --Display names only\r\n        self.createButton({\r\n            label=color, click_function=\"none\", function_owner=self,\r\n            position={2.5,0.15,-2.54+0.57*(i-1)}, height=0, width=0, font_size=240\r\n        })\r\n        --Clickable button under name\r\n        self.createButton({\r\n            click_function=funcName, function_owner=self,\r\n            position={2.5,0.04,-2.58+0.57*(i-1)}, height=260, width=1000\r\n        })\r\n        self.setVar(funcName, func)\r\n    end\r\nend\r\n\r\n--Spawns buttons for colors (editing color list)\r\nfunction createEditModeButtons()\r\n    for i, param in ipairs(editModeButtonParams) do\r\n        local pos, funcName = \"\", \"clickEdit\"..param.c\r\n        local func = function(o,c) clickEditColor(param.c, c) end\r\n        if param.r == 1 then pos = {4.55,0,-2.5+0.923*(i-1)}\r\n        else pos = {5.48,0,-2.5+0.923*(i-6)} end\r\n        self.createButton({\r\n            click_function=funcName, function_owner=self,\r\n            position=pos, height=400, width=400,\r\n        })\r\n        self.setVar(funcName, func)\r\n    end\r\n    self.createButton({\r\n        click_function=\"clickUndoColor\", function_owner=self,\r\n        position={4.55,0,2.37}, height=550, width=400,\r\n    })\r\n    self.createButton({\r\n        click_function=\"clickSubmitColors\", function_owner=self,\r\n        position={5.48,0,2.37}, height=550, width=400,\r\n    })\r\nend\r\n\r\n--Moves indicator down on the color name list\r\nfunction moveColorIndicator(i)\r\n    self.editButton({index=0, position={2.5,0.15,-2.54+0.57*(i-1)}})\r\nend\r\n\r\n--Adds names to the color list in edit mode only, displays only\r\nfunction addColorToColorList(playerColor)\r\n    local i = #colorList\r\n    self.createButton({\r\n        label=playerColor, click_function=\"none\", function_owner=self,\r\n        position={2.5,0.15,-2.54+0.57*(i-1)}, height=0, width=0, font_size=240\r\n    })\r\nend\r\n\r\n--Removes the last entry fro mthe color list in edit mode only\r\nfunction removeColorFromColorList()\r\n    self.removeButton(11+#colorList)\r\nend\r\n\r\n--[[            Data Tables            ]]\r\n\r\n--Button creation data\r\nactiveModeButtonParams = {\r\n    {cf=\"clickEndTurn\", h=1240, w=1900, p={-1.18,0.05,-1.4}},\r\n    {cf=\"clickBackTurn\", h=540, w=1900, p={-1.18,0.05,0.74}},\r\n    {cf=\"clickSetPlace\", h=540, w=900, p={-2.22,0.05,2.135}},\r\n    {cf=\"clickSetColor\", h=540, w=900, p={-0.12,0.05,2.135}},\r\n}\r\neditModeButtonParams = {\r\n    {c=\"White\", r=1}, {c=\"Red\", r=1}, {c=\"Yellow\", r=1},\r\n    {c=\"Teal\", r=1}, {c=\"Purple\", r=1},\r\n    {c=\"Brown\", r=2}, {c=\"Orange\", r=2}, {c=\"Green\", r=2},\r\n    {c=\"Blue\", r=2}, {c=\"Pink\", r=2}\r\n}\r\n\r\n--Data table which is used for printToAll\r\nprintMessageStringGenerationData = {\r\n    endTurnMatch = {\"CLICKC_NAME\", \" ended their turn.\"},\r\n    endTurnMiss = {\"CLICKC_NAME\", \" ended \", \"CURRENTC\", \"'s turn.\"},\r\n    backTurnMatch = {\"CLICKC_NAME\", \" ended their turn. [i](Back)[/i]\"},\r\n    backTurnMiss = {\"CLICKC_NAME\", \" ended \", \"CURRENTC\", \"'s turn. [i](Back)[/i]\"},\r\n    activeColorMatch = {\"CLICKC_NAME\", \" ended their turn, passing to \", \"PLAYERC\", \".\"},\r\n    activeColorMiss = {\"CLICKC_NAME\", \" ended \", \"CURRENTC\", \"'s turn, passing to \", \"PLAYERC\", \".\"},\r\n}\r\n",
      "LuaScriptState": "{\"ci\":2,\"cl\":[\"Green\",\"White\"],\"dp\":[8.64360827229189,-2.55151557922363,8.86089686618297]}",
      "GUID": "8b66cc"
    }
  ],
  "TabStates": {},
  "VersionNumber": ""
}